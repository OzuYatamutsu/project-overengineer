apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-config
  labels:
    app: vault
data:
  vault.hcl: |
    ui = true
    cluster_name = "vault"

    listener "tcp" {
      address     = "0.0.0.0:8200"
      cluster_address = "0.0.0.0:8201"
      tls_cert_file     = "/vault/tls/vault.crt"
      tls_key_file      = "/vault/tls/vault.key"
    }

    storage "raft" {
      path    = "/vault/data"
    }

    api_addr     = "https://svc-vault.default.svc.cluster.local:8200"
    cluster_addr = "https://svc-vault.default.svc.cluster.local:8201"
    disable_mlock = true

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-agent-config
data:
  config.hcl: |
    exit_after_auth = false
    pid_file = "/tmp/vault.pid"

    vault {
      address = "https://svc-vault.default.svc.cluster.local:8200"
      ca_cert = "/vault/tls/ca.crt"
    }

    auto_auth {
      method "kubernetes" {
        mount_path = "auth/kubernetes"
        config = {
          role = "svc-auth"
        }
      }

      sink "file" {
        config = {
          path = "/vault/secrets/.token"
        }
      }
    }

    template {
      source      = "/vault/config/config.ctmpl"
      destination = "/vault/secrets/config.txt"
    }
  config.ctmpl: |
    {{- with secret "secret/data/myapp/config" -}}
    {{ .Data.data.config }}
    {{- end }}

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vault
spec:
  serviceName: svc-vault
  replicas: 3
  selector:
    matchLabels:
      app: vault
  template:
    metadata:
      labels:
        app: vault
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: vault
                topologyKey: "kubernetes.io/hostname"
      serviceAccountName: default
      securityContext:
        runAsUser: 100
        runAsGroup: 100
        fsGroup: 100
        runAsNonRoot: true
      containers:
        - name: vault
          image: ghcr.io/ozuyatamutsu/project-overengineer/vault:v1
          args:
            - "server"
          ports:
            - name: http
              containerPort: 8200
            - name: internal
              containerPort: 8201
          env:
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SKIP_CHOWN
              value: "true"
            - name: SKIP_SETCAP
              value: "true"
          volumeMounts:
            - name: config
              mountPath: /vault/config
            - name: data
              mountPath: /vault/data
          readinessProbe:
            httpGet:
              path: /v1/sys/health?standbyok=true&uninitcode=200&sealedcode=200
              port: 8200
              scheme: HTTPS
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /v1/sys/health?standbyok=true
              port: 8200
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 30
          resources:
            requests:
              cpu: "50m"
              memory: "64Mi"
            limits:
              cpu: "200m"
              memory: "128Mi"
          securityContext:
            readOnlyRootFilesystem: true
      volumes:
        - name: config
          configMap:
            name: vault-config
        - name: data
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 512Mi

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-init
  namespace: default

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vault-init-role
  namespace: default
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "create", "update", "patch"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vault-init-binding
  namespace: default
subjects:
  - kind: ServiceAccount
    name: vault-init
    namespace: default
roleRef:
  kind: Role
  name: vault-init-role
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: batch/v1
kind: Job
metadata:
  name: vault-primary-init
spec:
  template:
    spec:
      serviceAccountName: vault-init
      restartPolicy: OnFailure
      containers:
        - name: vault-primary-init
          image: ghcr.io/ozuyatamutsu/project-overengineer/vault:v1
          command:
            - /bin/sh
            - -ec
            - |
              apk add --no-cache curl jq kubectl

              # Wait for vault-0 to start
              until kubectl get pod vault-0 -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' | grep -q True; do
                echo "Waiting for vault-0 pod to be ready..."
                sleep 5
              done

              # Make sure vault-0's vault API is ready
              until curl -k https://vault-0.svc-vault.default.svc.cluster.local:8200/v1/sys/health; do
                echo "Waiting for Vault API..."
                sleep 5
              done

              # Initialize Vault if not already initialized
              if ! vault status -address=https://vault-0.svc-vault.default.svc.cluster.local:8200 -tls-skip-verify | grep -q 'Initialized.*true'; then
                echo "Initializing Vault..."
                vault operator init -address=https://vault-0.svc-vault.default.svc.cluster.local:8200 -key-shares=1 -key-threshold=1 -format=json -tls-skip-verify > /vault/unseal-info.json
                UNSEAL_KEY=$(jq -r '.unseal_keys_b64[0]' /vault/unseal-info.json)
                ROOT_TOKEN=$(jq -r '.root_token' /vault/unseal-info.json)

                echo "Unsealing Vault..."
                vault operator unseal -address=https://vault-0.svc-vault.default.svc.cluster.local:8200 -tls-skip-verify $UNSEAL_KEY

                echo "Saving credentials to a secret..."
                kubectl create secret generic vault-init-keys --from-file=/vault/unseal-info.json --dry-run=client -o yaml | kubectl apply -f -
              else
                echo "Vault already initialized."
              fi

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: svc-auth

---

apiVersion: v1
kind: Service
metadata:
  name: svc-vault
spec:
  clusterIP: None
  ports:
    - name: http
      port: 8200
    - name: internal
      port: 8201
  selector:
    app: vault
